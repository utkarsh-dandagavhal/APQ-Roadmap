{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import'./Assessment.css';// Import your custom CSS file\nimport Notification from'./Notification';// Import the Notification component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Assessment=()=>{const[questions,setQuestions]=useState([]);const[options,setOptions]=useState({});const[answers,setAnswers]=useState({});const[notification,setNotification]=useState('');const navigate=useNavigate();useEffect(()=>{// Fetch the data from the JSON file\nfetch('/Question_Option.json').then(response=>response.json()).then(data=>{setQuestions(data.questions);setOptions(data.options);}).catch(error=>console.error('Error fetching data:',error));},[]);const handleChange=(questionId,option)=>{setAnswers(prevAnswers=>{const currentAnswers=prevAnswers[questionId]||[];const updatedAnswers=currentAnswers.includes(option)?currentAnswers.filter(item=>item!==option)// Remove the option if already selected\n:[...currentAnswers,option];// Add the option if not already selected\nreturn{...prevAnswers,[questionId]:updatedAnswers};});};const handleSubmit=event=>{event.preventDefault();// Check if any question has no selected options\nconst hasUnansweredQuestions=questions.some(question=>{return(answers[question.id]||[]).length===0;});if(hasUnansweredQuestions){setNotification('Please select at least one option for each question.');return;// Prevent form submission\n}navigate('/results',{state:{answers}});};const handleCloseNotification=()=>{setNotification('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"assessment-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Self-Assessment\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[questions.map(question=>{var _options$question$id;return/*#__PURE__*/_jsxs(\"div\",{className:\"question-block\",children:[/*#__PURE__*/_jsx(\"h2\",{children:question.text}),/*#__PURE__*/_jsx(\"div\",{className:\"options\",children:(_options$question$id=options[question.id])===null||_options$question$id===void 0?void 0:_options$question$id.map(option=>/*#__PURE__*/_jsxs(\"label\",{className:\"option-label\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:option,checked:(answers[question.id]||[]).includes(option),onChange:()=>handleChange(question.id,option)}),option]},option))})]},question.id);}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",children:\"Submit\"})]}),notification&&/*#__PURE__*/_jsx(Notification,{message:notification,onClose:handleCloseNotification})]});};export default Assessment;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Notification","jsx","_jsx","jsxs","_jsxs","Assessment","questions","setQuestions","options","setOptions","answers","setAnswers","notification","setNotification","navigate","fetch","then","response","json","data","catch","error","console","handleChange","questionId","option","prevAnswers","currentAnswers","updatedAnswers","includes","filter","item","handleSubmit","event","preventDefault","hasUnansweredQuestions","some","question","id","length","state","handleCloseNotification","className","children","onSubmit","map","_options$question$id","text","type","value","checked","onChange","message","onClose"],"sources":["C:/Users/Utkarsh/Desktop/APQ Roadmap/roadmap/src/Assessment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Assessment.css'; // Import your custom CSS file\r\nimport Notification from './Notification'; // Import the Notification component\r\n\r\nconst Assessment = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n  const [answers, setAnswers] = useState({});\r\n  const [notification, setNotification] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Fetch the data from the JSON file\r\n    fetch('/Question_Option.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setQuestions(data.questions);\r\n        setOptions(data.options);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  const handleChange = (questionId, option) => {\r\n    setAnswers(prevAnswers => {\r\n      const currentAnswers = prevAnswers[questionId] || [];\r\n      const updatedAnswers = currentAnswers.includes(option)\r\n        ? currentAnswers.filter(item => item !== option)  // Remove the option if already selected\r\n        : [...currentAnswers, option];  // Add the option if not already selected\r\n\r\n      return {\r\n        ...prevAnswers,\r\n        [questionId]: updatedAnswers\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Check if any question has no selected options\r\n    const hasUnansweredQuestions = questions.some(question => {\r\n      return (answers[question.id] || []).length === 0;\r\n    });\r\n\r\n    if (hasUnansweredQuestions) {\r\n      setNotification('Please select at least one option for each question.');\r\n      return; // Prevent form submission\r\n    }\r\n\r\n    navigate('/results', { state: { answers } });\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setNotification('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"assessment-container\">\r\n      <h1>Self-Assessment</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        {questions.map(question => (\r\n          <div key={question.id} className=\"question-block\">\r\n            <h2>{question.text}</h2>\r\n            <div className=\"options\">\r\n              {options[question.id]?.map(option => (\r\n                <label key={option} className=\"option-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    value={option}\r\n                    checked={(answers[question.id] || []).includes(option)}\r\n                    onChange={() => handleChange(question.id, option)}\r\n                  />\r\n                  {option}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n      </form>\r\n\r\n      {notification && (\r\n        <Notification message={notification} onClose={handleCloseNotification} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assessment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
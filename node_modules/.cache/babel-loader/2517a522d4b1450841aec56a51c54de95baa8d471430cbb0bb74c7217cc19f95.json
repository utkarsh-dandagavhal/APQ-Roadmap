{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utkarsh\\\\Desktop\\\\APQ Roadmap\\\\roadmap\\\\src\\\\Assessment.js\",\n  _s = $RefreshSig$();\n// src/Assessment.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Assessment.css'; // Import your custom CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questions = [{\n  id: 1,\n  text: \"Question 1?\"\n}, {\n  id: 2,\n  text: \"Question 2?\"\n}, {\n  id: 3,\n  text: \"Question 3?\"\n}, {\n  id: 4,\n  text: \"Question 4?\"\n}, {\n  id: 5,\n  text: \"Question 5?\"\n}];\nconst options = {\n  1: [\"Option 1A\", \"Option 1B\", \"Option 1C\", \"Option 1D\"],\n  2: [\"Option 2A\", \"Option 2B\", \"Option 2C\", \"Option 2D\"],\n  3: [\"Option 3A\", \"Option 3B\", \"Option 3C\", \"Option 3D\"],\n  4: [\"Option 4A\", \"Option 4B\", \"Option 4C\", \"Option 4D\"],\n  5: [\"Option 5A\", \"Option 5B\", \"Option 5C\", \"Option 5D\"]\n};\nconst Assessment = () => {\n  _s();\n  const [answers, setAnswers] = useState({});\n  const navigate = useNavigate();\n  const handleChange = (questionId, option) => {\n    setAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [questionId]: [...(prevAnswers[questionId] || []), option]\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    navigate('/results', {\n      state: {\n        answers\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Self-Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Assessment, \"deL0RG+mc8SurQ64wRDJRkYFErU=\", false, function () {\n  return [useNavigate];\n});\n_c = Assessment;\nexport default Assessment;\nvar _c;\n$RefreshReg$(_c, \"Assessment\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","questions","id","text","options","Assessment","_s","answers","setAnswers","navigate","handleChange","questionId","option","prevAnswers","handleSubmit","event","preventDefault","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","question","type","_c","$RefreshReg$"],"sources":["C:/Users/Utkarsh/Desktop/APQ Roadmap/roadmap/src/Assessment.js"],"sourcesContent":["// src/Assessment.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Assessment.css'; // Import your custom CSS file\r\n\r\nconst questions = [\r\n  { id: 1, text: \"Question 1?\" },\r\n  { id: 2, text: \"Question 2?\" },\r\n  { id: 3, text: \"Question 3?\" },\r\n  { id: 4, text: \"Question 4?\" },\r\n  { id: 5, text: \"Question 5?\" }\r\n];\r\n\r\nconst options = {\r\n  1: [\"Option 1A\", \"Option 1B\", \"Option 1C\", \"Option 1D\"],\r\n  2: [\"Option 2A\", \"Option 2B\", \"Option 2C\", \"Option 2D\"],\r\n  3: [\"Option 3A\", \"Option 3B\", \"Option 3C\", \"Option 3D\"],\r\n  4: [\"Option 4A\", \"Option 4B\", \"Option 4C\", \"Option 4D\"],\r\n  5: [\"Option 5A\", \"Option 5B\", \"Option 5C\", \"Option 5D\"]\r\n};\r\n\r\nconst Assessment = () => {\r\n  const [answers, setAnswers] = useState({});\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (questionId, option) => {\r\n    setAnswers(prevAnswers => ({\r\n      ...prevAnswers,\r\n      [questionId]: [...(prevAnswers[questionId] || []), option]\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    navigate('/results', { state: { answers } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"assessment-container\">\r\n      <h1>Self-Assessment</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        {questions.map(question => (\r\n          <div key={question.id} className=\"question-block\">\r\n            <h2>{question.text}</h2>\r\n            <div className=\"options\">\r\n              {/* {options[question.id].map(option => (\r\n                <label key={option} className=\"option-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    value={option}\r\n                    // onChange={() => handleChange(question.id, option)}\r\n                    onChange={() => {}}\r\n                  />\r\n                  {option}\r\n                </label>\r\n              ))} */}\r\n              \r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assessment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utkarsh\\\\Desktop\\\\APQ Roadmap\\\\roadmap\\\\src\\\\Assessment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Assessment.css'; // Import your custom CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Assessment = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState({});\n  const [answers, setAnswers] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch the data from the JSON file\n    fetch('/Question_Option.json').then(response => response.json()).then(data => {\n      setQuestions(data.questions);\n      setOptions(data.options);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const handleChange = (questionId, option) => {\n    setAnswers(prevAnswers => {\n      const currentAnswers = prevAnswers[questionId] || [];\n      const updatedAnswers = currentAnswers.includes(option) ? currentAnswers.filter(item => item !== option) // Remove the option if already selected\n      : [...currentAnswers, option]; // Add the option if not already selected\n\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswers\n      };\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Collect questions without selections\n    const unansweredQuestions = questions.filter(question => {\n      return (answers[question.id] || []).length === 0;\n    });\n    if (unansweredQuestions.length > 0) {\n      // Display alert for each unanswered question\n      unansweredQuestions.forEach(question => {\n        alert(`Please select at least one option  `);\n      });\n      return; // Prevent form submission\n    }\n    navigate('/results', {\n      state: {\n        answers\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Self-Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map(question => {\n        var _options$question$id;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: question.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: (_options$question$id = options[question.id]) === null || _options$question$id === void 0 ? void 0 : _options$question$id.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"option-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: option,\n                checked: (answers[question.id] || []).includes(option),\n                onChange: () => handleChange(question.id, option)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this), option]\n            }, option, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Assessment, \"SWZnICV/DLdylAMc15KPzHLnnPA=\", false, function () {\n  return [useNavigate];\n});\n_c = Assessment;\nexport default Assessment;\nvar _c;\n$RefreshReg$(_c, \"Assessment\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Assessment","_s","questions","setQuestions","options","setOptions","answers","setAnswers","navigate","fetch","then","response","json","data","catch","error","console","handleChange","questionId","option","prevAnswers","currentAnswers","updatedAnswers","includes","filter","item","handleSubmit","event","preventDefault","unansweredQuestions","question","id","length","forEach","alert","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","_options$question$id","text","type","value","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Utkarsh/Desktop/APQ Roadmap/roadmap/src/Assessment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Assessment.css'; // Import your custom CSS file\r\n\r\nconst Assessment = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n  const [answers, setAnswers] = useState({});\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Fetch the data from the JSON file\r\n    fetch('/Question_Option.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setQuestions(data.questions);\r\n        setOptions(data.options);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  const handleChange = (questionId, option) => {\r\n    setAnswers(prevAnswers => {\r\n      const currentAnswers = prevAnswers[questionId] || [];\r\n      const updatedAnswers = currentAnswers.includes(option)\r\n        ? currentAnswers.filter(item => item !== option)  // Remove the option if already selected\r\n        : [...currentAnswers, option];  // Add the option if not already selected\r\n\r\n      return {\r\n        ...prevAnswers,\r\n        [questionId]: updatedAnswers\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Collect questions without selections\r\n    const unansweredQuestions = questions.filter(question => {\r\n      return (answers[question.id] || []).length === 0;\r\n    });\r\n\r\n    if (unansweredQuestions.length > 0) {\r\n      // Display alert for each unanswered question\r\n      unansweredQuestions.forEach(question => {\r\n        alert(`Please select at least one option  `);\r\n      });\r\n      return; // Prevent form submission\r\n    }\r\n\r\n    navigate('/results', { state: { answers } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"assessment-container\">\r\n      <h1>Self-Assessment</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        {questions.map(question => (\r\n          <div key={question.id} className=\"question-block\">\r\n            <h2>{question.text}</h2>\r\n            <div className=\"options\">\r\n              {options[question.id]?.map(option => (\r\n                <label key={option} className=\"option-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    value={option}\r\n                    checked={(answers[question.id] || []).includes(option)}\r\n                    onChange={() => handleChange(question.id, option)}\r\n                  />\r\n                  {option}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assessment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
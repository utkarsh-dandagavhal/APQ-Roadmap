{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utkarsh\\\\Desktop\\\\APQ Roadmap\\\\roadmap\\\\src\\\\Assessment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Assessment.css'; // Import your custom CSS file\nimport Notification from './Notification'; // Import the Notification component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Assessment = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState({});\n  const [answers, setAnswers] = useState({});\n  const [notification, setNotification] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch the data from the JSON file\n    fetch('/Question_Option.json').then(response => response.json()).then(data => {\n      setQuestions(data.questions);\n      setOptions(data.options);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const handleChange = (questionId, option) => {\n    setAnswers(prevAnswers => {\n      const currentAnswers = prevAnswers[questionId] || [];\n      const updatedAnswers = currentAnswers.includes(option) ? currentAnswers.filter(item => item !== option) // Remove the option if already selected\n      : [...currentAnswers, option]; // Add the option if not already selected\n\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswers\n      };\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    // Check if any question has no selected options\n    const hasUnansweredQuestions = questions.some(question => {\n      return (answers[question.id] || []).length === 0;\n    });\n    if (hasUnansweredQuestions) {\n      setNotification('Please select at least one option for each question.');\n      return; // Prevent form submission\n    }\n    navigate('/results', {\n      state: {\n        answers\n      }\n    });\n  };\n  const handleCloseNotification = () => {\n    setNotification('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Self-Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions.map(question => {\n        var _options$question$id;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: question.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: (_options$question$id = options[question.id]) === null || _options$question$id === void 0 ? void 0 : _options$question$id.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"option-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: option,\n                checked: (answers[question.id] || []).includes(option),\n                onChange: () => handleChange(question.id, option)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this), option]\n            }, option, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification,\n      onClose: handleCloseNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Assessment, \"5V5Y6519d/1YoaqGlYUrBgYD+aE=\", false, function () {\n  return [useNavigate];\n});\n_c = Assessment;\nexport default Assessment;\nvar _c;\n$RefreshReg$(_c, \"Assessment\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Notification","jsxDEV","_jsxDEV","Assessment","_s","questions","setQuestions","options","setOptions","answers","setAnswers","notification","setNotification","navigate","fetch","then","response","json","data","catch","error","console","handleChange","questionId","option","prevAnswers","currentAnswers","updatedAnswers","includes","filter","item","handleSubmit","event","preventDefault","hasUnansweredQuestions","some","question","id","length","state","handleCloseNotification","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","_options$question$id","text","type","value","checked","onChange","message","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Utkarsh/Desktop/APQ Roadmap/roadmap/src/Assessment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Assessment.css'; // Import your custom CSS file\r\nimport Notification from './Notification'; // Import the Notification component\r\n\r\nconst Assessment = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n  const [answers, setAnswers] = useState({});\r\n  const [notification, setNotification] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Fetch the data from the JSON file\r\n    fetch('/Question_Option.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setQuestions(data.questions);\r\n        setOptions(data.options);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  const handleChange = (questionId, option) => {\r\n    setAnswers(prevAnswers => {\r\n      const currentAnswers = prevAnswers[questionId] || [];\r\n      const updatedAnswers = currentAnswers.includes(option)\r\n        ? currentAnswers.filter(item => item !== option)  // Remove the option if already selected\r\n        : [...currentAnswers, option];  // Add the option if not already selected\r\n\r\n      return {\r\n        ...prevAnswers,\r\n        [questionId]: updatedAnswers\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Check if any question has no selected options\r\n    const hasUnansweredQuestions = questions.some(question => {\r\n      return (answers[question.id] || []).length === 0;\r\n    });\r\n\r\n    if (hasUnansweredQuestions) {\r\n      setNotification('Please select at least one option for each question.');\r\n      return; // Prevent form submission\r\n    }\r\n\r\n    navigate('/results', { state: { answers } });\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setNotification('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"assessment-container\">\r\n      <h1>Self-Assessment</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        {questions.map(question => (\r\n          <div key={question.id} className=\"question-block\">\r\n            <h2>{question.text}</h2>\r\n            <div className=\"options\">\r\n              {options[question.id]?.map(option => (\r\n                <label key={option} className=\"option-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    value={option}\r\n                    checked={(answers[question.id] || []).includes(option)}\r\n                    onChange={() => handleChange(question.id, option)}\r\n                  />\r\n                  {option}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" className=\"submit-button\">Submit</button>\r\n      </form>\r\n\r\n      {notification && (\r\n        <Notification message={notification} onClose={handleCloseNotification} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Assessment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}